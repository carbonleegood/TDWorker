/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "GameCall_types.h"

#include <algorithm>

namespace thrift { namespace GameCall {

const char* PosInfo::ascii_fingerprint = "EA2086D2BB14222991D7B0497DE7B58B";
const uint8_t PosInfo::binary_fingerprint[16] = {0xEA,0x20,0x86,0xD2,0xBB,0x14,0x22,0x29,0x91,0xD7,0xB0,0x49,0x7D,0xE7,0xB5,0x8B};

uint32_t PosInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->x);
          this->__isset.x = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->y);
          this->__isset.y = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t PosInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("PosInfo");

  xfer += oprot->writeFieldBegin("x", ::apache::thrift::protocol::T_DOUBLE, 1);
  xfer += oprot->writeDouble(this->x);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("y", ::apache::thrift::protocol::T_DOUBLE, 2);
  xfer += oprot->writeDouble(this->y);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(PosInfo &a, PosInfo &b) {
  using ::std::swap;
  swap(a.x, b.x);
  swap(a.y, b.y);
  swap(a.__isset, b.__isset);
}

const char* PlayerInfo::ascii_fingerprint = "68F51A1A9BD41E94F13DF4A006910AD2";
const uint8_t PlayerInfo::binary_fingerprint[16] = {0x68,0xF5,0x1A,0x1A,0x9B,0xD4,0x1E,0x94,0xF1,0x3D,0xF4,0xA0,0x06,0x91,0x0A,0xD2};

uint32_t PlayerInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->X);
          this->__isset.X = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->Y);
          this->__isset.Y = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->Z);
          this->__isset.Z = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->R);
          this->__isset.R = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->name.clear();
            uint32_t _size0;
            ::apache::thrift::protocol::TType _etype3;
            xfer += iprot->readListBegin(_etype3, _size0);
            this->name.resize(_size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              xfer += iprot->readByte(this->name[_i4]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->Level);
          this->__isset.Level = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->ActorCode);
          this->__isset.ActorCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->HP);
          this->__isset.HP = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->MaxHP);
          this->__isset.MaxHP = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->MP);
          this->__isset.MP = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->MaxMP);
          this->__isset.MaxMP = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t PlayerInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("PlayerInfo");

  xfer += oprot->writeFieldBegin("X", ::apache::thrift::protocol::T_DOUBLE, 1);
  xfer += oprot->writeDouble(this->X);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Y", ::apache::thrift::protocol::T_DOUBLE, 2);
  xfer += oprot->writeDouble(this->Y);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Z", ::apache::thrift::protocol::T_DOUBLE, 3);
  xfer += oprot->writeDouble(this->Z);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("R", ::apache::thrift::protocol::T_DOUBLE, 4);
  xfer += oprot->writeDouble(this->R);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_LIST, 5);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_BYTE, static_cast<uint32_t>(this->name.size()));
    std::vector<int8_t> ::const_iterator _iter5;
    for (_iter5 = this->name.begin(); _iter5 != this->name.end(); ++_iter5)
    {
      xfer += oprot->writeByte((*_iter5));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Level", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->Level);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ActorCode", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32(this->ActorCode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("HP", ::apache::thrift::protocol::T_I32, 8);
  xfer += oprot->writeI32(this->HP);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("MaxHP", ::apache::thrift::protocol::T_I32, 9);
  xfer += oprot->writeI32(this->MaxHP);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("MP", ::apache::thrift::protocol::T_I32, 10);
  xfer += oprot->writeI32(this->MP);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("MaxMP", ::apache::thrift::protocol::T_I32, 11);
  xfer += oprot->writeI32(this->MaxMP);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(PlayerInfo &a, PlayerInfo &b) {
  using ::std::swap;
  swap(a.X, b.X);
  swap(a.Y, b.Y);
  swap(a.Z, b.Z);
  swap(a.R, b.R);
  swap(a.name, b.name);
  swap(a.Level, b.Level);
  swap(a.ActorCode, b.ActorCode);
  swap(a.HP, b.HP);
  swap(a.MaxHP, b.MaxHP);
  swap(a.MP, b.MP);
  swap(a.MaxMP, b.MaxMP);
  swap(a.__isset, b.__isset);
}

const char* MonsterInfo::ascii_fingerprint = "2F76F53921A44C9C8E04A3C1CCB29BF6";
const uint8_t MonsterInfo::binary_fingerprint[16] = {0x2F,0x76,0xF5,0x39,0x21,0xA4,0x4C,0x9C,0x8E,0x04,0xA3,0xC1,0xCC,0xB2,0x9B,0xF6};

uint32_t MonsterInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->HP);
          this->__isset.HP = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->type);
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->level);
          this->__isset.level = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->x);
          this->__isset.x = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->y);
          this->__isset.y = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->frd);
          this->__isset.frd = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->name.clear();
            uint32_t _size6;
            ::apache::thrift::protocol::TType _etype9;
            xfer += iprot->readListBegin(_etype9, _size6);
            this->name.resize(_size6);
            uint32_t _i10;
            for (_i10 = 0; _i10 < _size6; ++_i10)
            {
              xfer += iprot->readByte(this->name[_i10]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->force);
          this->__isset.force = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MonsterInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MonsterInfo");

  xfer += oprot->writeFieldBegin("HP", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->HP);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("level", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->level);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("x", ::apache::thrift::protocol::T_DOUBLE, 4);
  xfer += oprot->writeDouble(this->x);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("y", ::apache::thrift::protocol::T_DOUBLE, 5);
  xfer += oprot->writeDouble(this->y);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("frd", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->frd);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_LIST, 7);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_BYTE, static_cast<uint32_t>(this->name.size()));
    std::vector<int8_t> ::const_iterator _iter11;
    for (_iter11 = this->name.begin(); _iter11 != this->name.end(); ++_iter11)
    {
      xfer += oprot->writeByte((*_iter11));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("force", ::apache::thrift::protocol::T_I32, 8);
  xfer += oprot->writeI32(this->force);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MonsterInfo &a, MonsterInfo &b) {
  using ::std::swap;
  swap(a.HP, b.HP);
  swap(a.type, b.type);
  swap(a.level, b.level);
  swap(a.x, b.x);
  swap(a.y, b.y);
  swap(a.frd, b.frd);
  swap(a.name, b.name);
  swap(a.force, b.force);
  swap(a.__isset, b.__isset);
}

}} // namespace
