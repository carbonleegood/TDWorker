/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef GameCall_TYPES_H
#define GameCall_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace thrift { namespace GameCall {

typedef struct _PosInfo__isset {
  _PosInfo__isset() : x(false), y(false) {}
  bool x;
  bool y;
} _PosInfo__isset;

class PosInfo {
 public:

  static const char* ascii_fingerprint; // = "EA2086D2BB14222991D7B0497DE7B58B";
  static const uint8_t binary_fingerprint[16]; // = {0xEA,0x20,0x86,0xD2,0xBB,0x14,0x22,0x29,0x91,0xD7,0xB0,0x49,0x7D,0xE7,0xB5,0x8B};

  PosInfo() : x(0), y(0) {
  }

  virtual ~PosInfo() throw() {}

  double x;
  double y;

  _PosInfo__isset __isset;

  void __set_x(const double val) {
    x = val;
  }

  void __set_y(const double val) {
    y = val;
  }

  bool operator == (const PosInfo & rhs) const
  {
    if (!(x == rhs.x))
      return false;
    if (!(y == rhs.y))
      return false;
    return true;
  }
  bool operator != (const PosInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PosInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(PosInfo &a, PosInfo &b);

typedef struct _PlayerInfo__isset {
  _PlayerInfo__isset() : X(false), Y(false), Z(false), R(false), name(false), Level(false), ActorCode(false), HP(false), MaxHP(false), MP(false), MaxMP(false) {}
  bool X;
  bool Y;
  bool Z;
  bool R;
  bool name;
  bool Level;
  bool ActorCode;
  bool HP;
  bool MaxHP;
  bool MP;
  bool MaxMP;
} _PlayerInfo__isset;

class PlayerInfo {
 public:

  static const char* ascii_fingerprint; // = "68F51A1A9BD41E94F13DF4A006910AD2";
  static const uint8_t binary_fingerprint[16]; // = {0x68,0xF5,0x1A,0x1A,0x9B,0xD4,0x1E,0x94,0xF1,0x3D,0xF4,0xA0,0x06,0x91,0x0A,0xD2};

  PlayerInfo() : X(0), Y(0), Z(0), R(0), Level(0), ActorCode(0), HP(0), MaxHP(0), MP(0), MaxMP(0) {
  }

  virtual ~PlayerInfo() throw() {}

  double X;
  double Y;
  double Z;
  double R;
  std::vector<int8_t>  name;
  int32_t Level;
  int32_t ActorCode;
  int32_t HP;
  int32_t MaxHP;
  int32_t MP;
  int32_t MaxMP;

  _PlayerInfo__isset __isset;

  void __set_X(const double val) {
    X = val;
  }

  void __set_Y(const double val) {
    Y = val;
  }

  void __set_Z(const double val) {
    Z = val;
  }

  void __set_R(const double val) {
    R = val;
  }

  void __set_name(const std::vector<int8_t> & val) {
    name = val;
  }

  void __set_Level(const int32_t val) {
    Level = val;
  }

  void __set_ActorCode(const int32_t val) {
    ActorCode = val;
  }

  void __set_HP(const int32_t val) {
    HP = val;
  }

  void __set_MaxHP(const int32_t val) {
    MaxHP = val;
  }

  void __set_MP(const int32_t val) {
    MP = val;
  }

  void __set_MaxMP(const int32_t val) {
    MaxMP = val;
  }

  bool operator == (const PlayerInfo & rhs) const
  {
    if (!(X == rhs.X))
      return false;
    if (!(Y == rhs.Y))
      return false;
    if (!(Z == rhs.Z))
      return false;
    if (!(R == rhs.R))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(Level == rhs.Level))
      return false;
    if (!(ActorCode == rhs.ActorCode))
      return false;
    if (!(HP == rhs.HP))
      return false;
    if (!(MaxHP == rhs.MaxHP))
      return false;
    if (!(MP == rhs.MP))
      return false;
    if (!(MaxMP == rhs.MaxMP))
      return false;
    return true;
  }
  bool operator != (const PlayerInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PlayerInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(PlayerInfo &a, PlayerInfo &b);

typedef struct _MonsterInfo__isset {
  _MonsterInfo__isset() : HP(false), type(false), level(false), x(false), y(false), frd(false), name(false), force(false) {}
  bool HP;
  bool type;
  bool level;
  bool x;
  bool y;
  bool frd;
  bool name;
  bool force;
} _MonsterInfo__isset;

class MonsterInfo {
 public:

  static const char* ascii_fingerprint; // = "2F76F53921A44C9C8E04A3C1CCB29BF6";
  static const uint8_t binary_fingerprint[16]; // = {0x2F,0x76,0xF5,0x39,0x21,0xA4,0x4C,0x9C,0x8E,0x04,0xA3,0xC1,0xCC,0xB2,0x9B,0xF6};

  MonsterInfo() : HP(0), type(0), level(0), x(0), y(0), frd(0), force(0) {
  }

  virtual ~MonsterInfo() throw() {}

  int32_t HP;
  int32_t type;
  int32_t level;
  double x;
  double y;
  int32_t frd;
  std::vector<int8_t>  name;
  int32_t force;

  _MonsterInfo__isset __isset;

  void __set_HP(const int32_t val) {
    HP = val;
  }

  void __set_type(const int32_t val) {
    type = val;
  }

  void __set_level(const int32_t val) {
    level = val;
  }

  void __set_x(const double val) {
    x = val;
  }

  void __set_y(const double val) {
    y = val;
  }

  void __set_frd(const int32_t val) {
    frd = val;
  }

  void __set_name(const std::vector<int8_t> & val) {
    name = val;
  }

  void __set_force(const int32_t val) {
    force = val;
  }

  bool operator == (const MonsterInfo & rhs) const
  {
    if (!(HP == rhs.HP))
      return false;
    if (!(type == rhs.type))
      return false;
    if (!(level == rhs.level))
      return false;
    if (!(x == rhs.x))
      return false;
    if (!(y == rhs.y))
      return false;
    if (!(frd == rhs.frd))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(force == rhs.force))
      return false;
    return true;
  }
  bool operator != (const MonsterInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MonsterInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MonsterInfo &a, MonsterInfo &b);

typedef struct _SkillInfo__isset {
  _SkillInfo__isset() : SkillID(false), CanRelease(false), name(false) {}
  bool SkillID;
  bool CanRelease;
  bool name;
} _SkillInfo__isset;

class SkillInfo {
 public:

  static const char* ascii_fingerprint; // = "98AF7D13251C890B477F86B8EA80D2E6";
  static const uint8_t binary_fingerprint[16]; // = {0x98,0xAF,0x7D,0x13,0x25,0x1C,0x89,0x0B,0x47,0x7F,0x86,0xB8,0xEA,0x80,0xD2,0xE6};

  SkillInfo() : SkillID(0), CanRelease(0) {
  }

  virtual ~SkillInfo() throw() {}

  int32_t SkillID;
  int32_t CanRelease;
  std::vector<int8_t>  name;

  _SkillInfo__isset __isset;

  void __set_SkillID(const int32_t val) {
    SkillID = val;
  }

  void __set_CanRelease(const int32_t val) {
    CanRelease = val;
  }

  void __set_name(const std::vector<int8_t> & val) {
    name = val;
  }

  bool operator == (const SkillInfo & rhs) const
  {
    if (!(SkillID == rhs.SkillID))
      return false;
    if (!(CanRelease == rhs.CanRelease))
      return false;
    if (!(name == rhs.name))
      return false;
    return true;
  }
  bool operator != (const SkillInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SkillInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(SkillInfo &a, SkillInfo &b);

typedef struct _SlotSkillInfo__isset {
  _SlotSkillInfo__isset() : SkillID(false), CanRelease(false), SlotAddr(false), name(false) {}
  bool SkillID;
  bool CanRelease;
  bool SlotAddr;
  bool name;
} _SlotSkillInfo__isset;

class SlotSkillInfo {
 public:

  static const char* ascii_fingerprint; // = "DA28266E6B4ECC8AA1B5C61BED69AD00";
  static const uint8_t binary_fingerprint[16]; // = {0xDA,0x28,0x26,0x6E,0x6B,0x4E,0xCC,0x8A,0xA1,0xB5,0xC6,0x1B,0xED,0x69,0xAD,0x00};

  SlotSkillInfo() : SkillID(0), CanRelease(0), SlotAddr(0) {
  }

  virtual ~SlotSkillInfo() throw() {}

  int32_t SkillID;
  int32_t CanRelease;
  int32_t SlotAddr;
  std::vector<int8_t>  name;

  _SlotSkillInfo__isset __isset;

  void __set_SkillID(const int32_t val) {
    SkillID = val;
  }

  void __set_CanRelease(const int32_t val) {
    CanRelease = val;
  }

  void __set_SlotAddr(const int32_t val) {
    SlotAddr = val;
  }

  void __set_name(const std::vector<int8_t> & val) {
    name = val;
  }

  bool operator == (const SlotSkillInfo & rhs) const
  {
    if (!(SkillID == rhs.SkillID))
      return false;
    if (!(CanRelease == rhs.CanRelease))
      return false;
    if (!(SlotAddr == rhs.SlotAddr))
      return false;
    if (!(name == rhs.name))
      return false;
    return true;
  }
  bool operator != (const SlotSkillInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SlotSkillInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(SlotSkillInfo &a, SlotSkillInfo &b);

}} // namespace

#endif
