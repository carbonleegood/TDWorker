/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef GameFuncCall_H
#define GameFuncCall_H

#include <thrift/TDispatchProcessor.h>
#include "GameCall_types.h"

namespace thrift { namespace GameCall {

class GameFuncCallIf {
 public:
  virtual ~GameFuncCallIf() {}
  virtual int32_t Test(const int32_t p1, const double p2) = 0;
  virtual void EnterGame(const int32_t Index) = 0;
  virtual void GetPlayerInfo(PlayerInfo& _return) = 0;
  virtual void GetMonsterList(std::vector<MonsterInfo> & _return) = 0;
  virtual void GetSkillInfo() = 0;
  virtual void ChangeAngle(const double angle) = 0;
  virtual int32_t FindPath(const double x, const double y) = 0;
  virtual int32_t PressKey(const int32_t key, const int32_t upordown) = 0;
  virtual int32_t ClickKey(const int32_t key, const int32_t ctrl) = 0;
  virtual int32_t LeftPressSlot(const int32_t SlotAddr) = 0;
  virtual int32_t RightPressSlot(const int32_t SlotAddr) = 0;
};

class GameFuncCallIfFactory {
 public:
  typedef GameFuncCallIf Handler;

  virtual ~GameFuncCallIfFactory() {}

  virtual GameFuncCallIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(GameFuncCallIf* /* handler */) = 0;
};

class GameFuncCallIfSingletonFactory : virtual public GameFuncCallIfFactory {
 public:
  GameFuncCallIfSingletonFactory(const boost::shared_ptr<GameFuncCallIf>& iface) : iface_(iface) {}
  virtual ~GameFuncCallIfSingletonFactory() {}

  virtual GameFuncCallIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(GameFuncCallIf* /* handler */) {}

 protected:
  boost::shared_ptr<GameFuncCallIf> iface_;
};

class GameFuncCallNull : virtual public GameFuncCallIf {
 public:
  virtual ~GameFuncCallNull() {}
  int32_t Test(const int32_t /* p1 */, const double /* p2 */) {
    int32_t _return = 0;
    return _return;
  }
  void EnterGame(const int32_t /* Index */) {
    return;
  }
  void GetPlayerInfo(PlayerInfo& /* _return */) {
    return;
  }
  void GetMonsterList(std::vector<MonsterInfo> & /* _return */) {
    return;
  }
  void GetSkillInfo() {
    return;
  }
  void ChangeAngle(const double /* angle */) {
    return;
  }
  int32_t FindPath(const double /* x */, const double /* y */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t PressKey(const int32_t /* key */, const int32_t /* upordown */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t ClickKey(const int32_t /* key */, const int32_t /* ctrl */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t LeftPressSlot(const int32_t /* SlotAddr */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t RightPressSlot(const int32_t /* SlotAddr */) {
    int32_t _return = 0;
    return _return;
  }
};

typedef struct _GameFuncCall_Test_args__isset {
  _GameFuncCall_Test_args__isset() : p1(false), p2(false) {}
  bool p1;
  bool p2;
} _GameFuncCall_Test_args__isset;

class GameFuncCall_Test_args {
 public:

  GameFuncCall_Test_args() : p1(0), p2(0) {
  }

  virtual ~GameFuncCall_Test_args() throw() {}

  int32_t p1;
  double p2;

  _GameFuncCall_Test_args__isset __isset;

  void __set_p1(const int32_t val) {
    p1 = val;
  }

  void __set_p2(const double val) {
    p2 = val;
  }

  bool operator == (const GameFuncCall_Test_args & rhs) const
  {
    if (!(p1 == rhs.p1))
      return false;
    if (!(p2 == rhs.p2))
      return false;
    return true;
  }
  bool operator != (const GameFuncCall_Test_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GameFuncCall_Test_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GameFuncCall_Test_pargs {
 public:


  virtual ~GameFuncCall_Test_pargs() throw() {}

  const int32_t* p1;
  const double* p2;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GameFuncCall_Test_result__isset {
  _GameFuncCall_Test_result__isset() : success(false) {}
  bool success;
} _GameFuncCall_Test_result__isset;

class GameFuncCall_Test_result {
 public:

  GameFuncCall_Test_result() : success(0) {
  }

  virtual ~GameFuncCall_Test_result() throw() {}

  int32_t success;

  _GameFuncCall_Test_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const GameFuncCall_Test_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GameFuncCall_Test_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GameFuncCall_Test_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GameFuncCall_Test_presult__isset {
  _GameFuncCall_Test_presult__isset() : success(false) {}
  bool success;
} _GameFuncCall_Test_presult__isset;

class GameFuncCall_Test_presult {
 public:


  virtual ~GameFuncCall_Test_presult() throw() {}

  int32_t* success;

  _GameFuncCall_Test_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GameFuncCall_EnterGame_args__isset {
  _GameFuncCall_EnterGame_args__isset() : Index(false) {}
  bool Index;
} _GameFuncCall_EnterGame_args__isset;

class GameFuncCall_EnterGame_args {
 public:

  GameFuncCall_EnterGame_args() : Index(0) {
  }

  virtual ~GameFuncCall_EnterGame_args() throw() {}

  int32_t Index;

  _GameFuncCall_EnterGame_args__isset __isset;

  void __set_Index(const int32_t val) {
    Index = val;
  }

  bool operator == (const GameFuncCall_EnterGame_args & rhs) const
  {
    if (!(Index == rhs.Index))
      return false;
    return true;
  }
  bool operator != (const GameFuncCall_EnterGame_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GameFuncCall_EnterGame_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GameFuncCall_EnterGame_pargs {
 public:


  virtual ~GameFuncCall_EnterGame_pargs() throw() {}

  const int32_t* Index;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GameFuncCall_EnterGame_result {
 public:

  GameFuncCall_EnterGame_result() {
  }

  virtual ~GameFuncCall_EnterGame_result() throw() {}


  bool operator == (const GameFuncCall_EnterGame_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const GameFuncCall_EnterGame_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GameFuncCall_EnterGame_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GameFuncCall_EnterGame_presult {
 public:


  virtual ~GameFuncCall_EnterGame_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class GameFuncCall_GetPlayerInfo_args {
 public:

  GameFuncCall_GetPlayerInfo_args() {
  }

  virtual ~GameFuncCall_GetPlayerInfo_args() throw() {}


  bool operator == (const GameFuncCall_GetPlayerInfo_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const GameFuncCall_GetPlayerInfo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GameFuncCall_GetPlayerInfo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GameFuncCall_GetPlayerInfo_pargs {
 public:


  virtual ~GameFuncCall_GetPlayerInfo_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GameFuncCall_GetPlayerInfo_result__isset {
  _GameFuncCall_GetPlayerInfo_result__isset() : success(false) {}
  bool success;
} _GameFuncCall_GetPlayerInfo_result__isset;

class GameFuncCall_GetPlayerInfo_result {
 public:

  GameFuncCall_GetPlayerInfo_result() {
  }

  virtual ~GameFuncCall_GetPlayerInfo_result() throw() {}

  PlayerInfo success;

  _GameFuncCall_GetPlayerInfo_result__isset __isset;

  void __set_success(const PlayerInfo& val) {
    success = val;
  }

  bool operator == (const GameFuncCall_GetPlayerInfo_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GameFuncCall_GetPlayerInfo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GameFuncCall_GetPlayerInfo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GameFuncCall_GetPlayerInfo_presult__isset {
  _GameFuncCall_GetPlayerInfo_presult__isset() : success(false) {}
  bool success;
} _GameFuncCall_GetPlayerInfo_presult__isset;

class GameFuncCall_GetPlayerInfo_presult {
 public:


  virtual ~GameFuncCall_GetPlayerInfo_presult() throw() {}

  PlayerInfo* success;

  _GameFuncCall_GetPlayerInfo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class GameFuncCall_GetMonsterList_args {
 public:

  GameFuncCall_GetMonsterList_args() {
  }

  virtual ~GameFuncCall_GetMonsterList_args() throw() {}


  bool operator == (const GameFuncCall_GetMonsterList_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const GameFuncCall_GetMonsterList_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GameFuncCall_GetMonsterList_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GameFuncCall_GetMonsterList_pargs {
 public:


  virtual ~GameFuncCall_GetMonsterList_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GameFuncCall_GetMonsterList_result__isset {
  _GameFuncCall_GetMonsterList_result__isset() : success(false) {}
  bool success;
} _GameFuncCall_GetMonsterList_result__isset;

class GameFuncCall_GetMonsterList_result {
 public:

  GameFuncCall_GetMonsterList_result() {
  }

  virtual ~GameFuncCall_GetMonsterList_result() throw() {}

  std::vector<MonsterInfo>  success;

  _GameFuncCall_GetMonsterList_result__isset __isset;

  void __set_success(const std::vector<MonsterInfo> & val) {
    success = val;
  }

  bool operator == (const GameFuncCall_GetMonsterList_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GameFuncCall_GetMonsterList_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GameFuncCall_GetMonsterList_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GameFuncCall_GetMonsterList_presult__isset {
  _GameFuncCall_GetMonsterList_presult__isset() : success(false) {}
  bool success;
} _GameFuncCall_GetMonsterList_presult__isset;

class GameFuncCall_GetMonsterList_presult {
 public:


  virtual ~GameFuncCall_GetMonsterList_presult() throw() {}

  std::vector<MonsterInfo> * success;

  _GameFuncCall_GetMonsterList_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class GameFuncCall_GetSkillInfo_args {
 public:

  GameFuncCall_GetSkillInfo_args() {
  }

  virtual ~GameFuncCall_GetSkillInfo_args() throw() {}


  bool operator == (const GameFuncCall_GetSkillInfo_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const GameFuncCall_GetSkillInfo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GameFuncCall_GetSkillInfo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GameFuncCall_GetSkillInfo_pargs {
 public:


  virtual ~GameFuncCall_GetSkillInfo_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GameFuncCall_GetSkillInfo_result {
 public:

  GameFuncCall_GetSkillInfo_result() {
  }

  virtual ~GameFuncCall_GetSkillInfo_result() throw() {}


  bool operator == (const GameFuncCall_GetSkillInfo_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const GameFuncCall_GetSkillInfo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GameFuncCall_GetSkillInfo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GameFuncCall_GetSkillInfo_presult {
 public:


  virtual ~GameFuncCall_GetSkillInfo_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GameFuncCall_ChangeAngle_args__isset {
  _GameFuncCall_ChangeAngle_args__isset() : angle(false) {}
  bool angle;
} _GameFuncCall_ChangeAngle_args__isset;

class GameFuncCall_ChangeAngle_args {
 public:

  GameFuncCall_ChangeAngle_args() : angle(0) {
  }

  virtual ~GameFuncCall_ChangeAngle_args() throw() {}

  double angle;

  _GameFuncCall_ChangeAngle_args__isset __isset;

  void __set_angle(const double val) {
    angle = val;
  }

  bool operator == (const GameFuncCall_ChangeAngle_args & rhs) const
  {
    if (!(angle == rhs.angle))
      return false;
    return true;
  }
  bool operator != (const GameFuncCall_ChangeAngle_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GameFuncCall_ChangeAngle_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GameFuncCall_ChangeAngle_pargs {
 public:


  virtual ~GameFuncCall_ChangeAngle_pargs() throw() {}

  const double* angle;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GameFuncCall_ChangeAngle_result {
 public:

  GameFuncCall_ChangeAngle_result() {
  }

  virtual ~GameFuncCall_ChangeAngle_result() throw() {}


  bool operator == (const GameFuncCall_ChangeAngle_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const GameFuncCall_ChangeAngle_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GameFuncCall_ChangeAngle_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GameFuncCall_ChangeAngle_presult {
 public:


  virtual ~GameFuncCall_ChangeAngle_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GameFuncCall_FindPath_args__isset {
  _GameFuncCall_FindPath_args__isset() : x(false), y(false) {}
  bool x;
  bool y;
} _GameFuncCall_FindPath_args__isset;

class GameFuncCall_FindPath_args {
 public:

  GameFuncCall_FindPath_args() : x(0), y(0) {
  }

  virtual ~GameFuncCall_FindPath_args() throw() {}

  double x;
  double y;

  _GameFuncCall_FindPath_args__isset __isset;

  void __set_x(const double val) {
    x = val;
  }

  void __set_y(const double val) {
    y = val;
  }

  bool operator == (const GameFuncCall_FindPath_args & rhs) const
  {
    if (!(x == rhs.x))
      return false;
    if (!(y == rhs.y))
      return false;
    return true;
  }
  bool operator != (const GameFuncCall_FindPath_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GameFuncCall_FindPath_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GameFuncCall_FindPath_pargs {
 public:


  virtual ~GameFuncCall_FindPath_pargs() throw() {}

  const double* x;
  const double* y;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GameFuncCall_FindPath_result__isset {
  _GameFuncCall_FindPath_result__isset() : success(false) {}
  bool success;
} _GameFuncCall_FindPath_result__isset;

class GameFuncCall_FindPath_result {
 public:

  GameFuncCall_FindPath_result() : success(0) {
  }

  virtual ~GameFuncCall_FindPath_result() throw() {}

  int32_t success;

  _GameFuncCall_FindPath_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const GameFuncCall_FindPath_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GameFuncCall_FindPath_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GameFuncCall_FindPath_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GameFuncCall_FindPath_presult__isset {
  _GameFuncCall_FindPath_presult__isset() : success(false) {}
  bool success;
} _GameFuncCall_FindPath_presult__isset;

class GameFuncCall_FindPath_presult {
 public:


  virtual ~GameFuncCall_FindPath_presult() throw() {}

  int32_t* success;

  _GameFuncCall_FindPath_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GameFuncCall_PressKey_args__isset {
  _GameFuncCall_PressKey_args__isset() : key(false), upordown(false) {}
  bool key;
  bool upordown;
} _GameFuncCall_PressKey_args__isset;

class GameFuncCall_PressKey_args {
 public:

  GameFuncCall_PressKey_args() : key(0), upordown(0) {
  }

  virtual ~GameFuncCall_PressKey_args() throw() {}

  int32_t key;
  int32_t upordown;

  _GameFuncCall_PressKey_args__isset __isset;

  void __set_key(const int32_t val) {
    key = val;
  }

  void __set_upordown(const int32_t val) {
    upordown = val;
  }

  bool operator == (const GameFuncCall_PressKey_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    if (!(upordown == rhs.upordown))
      return false;
    return true;
  }
  bool operator != (const GameFuncCall_PressKey_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GameFuncCall_PressKey_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GameFuncCall_PressKey_pargs {
 public:


  virtual ~GameFuncCall_PressKey_pargs() throw() {}

  const int32_t* key;
  const int32_t* upordown;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GameFuncCall_PressKey_result__isset {
  _GameFuncCall_PressKey_result__isset() : success(false) {}
  bool success;
} _GameFuncCall_PressKey_result__isset;

class GameFuncCall_PressKey_result {
 public:

  GameFuncCall_PressKey_result() : success(0) {
  }

  virtual ~GameFuncCall_PressKey_result() throw() {}

  int32_t success;

  _GameFuncCall_PressKey_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const GameFuncCall_PressKey_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GameFuncCall_PressKey_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GameFuncCall_PressKey_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GameFuncCall_PressKey_presult__isset {
  _GameFuncCall_PressKey_presult__isset() : success(false) {}
  bool success;
} _GameFuncCall_PressKey_presult__isset;

class GameFuncCall_PressKey_presult {
 public:


  virtual ~GameFuncCall_PressKey_presult() throw() {}

  int32_t* success;

  _GameFuncCall_PressKey_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GameFuncCall_ClickKey_args__isset {
  _GameFuncCall_ClickKey_args__isset() : key(false), ctrl(false) {}
  bool key;
  bool ctrl;
} _GameFuncCall_ClickKey_args__isset;

class GameFuncCall_ClickKey_args {
 public:

  GameFuncCall_ClickKey_args() : key(0), ctrl(0) {
  }

  virtual ~GameFuncCall_ClickKey_args() throw() {}

  int32_t key;
  int32_t ctrl;

  _GameFuncCall_ClickKey_args__isset __isset;

  void __set_key(const int32_t val) {
    key = val;
  }

  void __set_ctrl(const int32_t val) {
    ctrl = val;
  }

  bool operator == (const GameFuncCall_ClickKey_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    if (!(ctrl == rhs.ctrl))
      return false;
    return true;
  }
  bool operator != (const GameFuncCall_ClickKey_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GameFuncCall_ClickKey_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GameFuncCall_ClickKey_pargs {
 public:


  virtual ~GameFuncCall_ClickKey_pargs() throw() {}

  const int32_t* key;
  const int32_t* ctrl;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GameFuncCall_ClickKey_result__isset {
  _GameFuncCall_ClickKey_result__isset() : success(false) {}
  bool success;
} _GameFuncCall_ClickKey_result__isset;

class GameFuncCall_ClickKey_result {
 public:

  GameFuncCall_ClickKey_result() : success(0) {
  }

  virtual ~GameFuncCall_ClickKey_result() throw() {}

  int32_t success;

  _GameFuncCall_ClickKey_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const GameFuncCall_ClickKey_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GameFuncCall_ClickKey_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GameFuncCall_ClickKey_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GameFuncCall_ClickKey_presult__isset {
  _GameFuncCall_ClickKey_presult__isset() : success(false) {}
  bool success;
} _GameFuncCall_ClickKey_presult__isset;

class GameFuncCall_ClickKey_presult {
 public:


  virtual ~GameFuncCall_ClickKey_presult() throw() {}

  int32_t* success;

  _GameFuncCall_ClickKey_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GameFuncCall_LeftPressSlot_args__isset {
  _GameFuncCall_LeftPressSlot_args__isset() : SlotAddr(false) {}
  bool SlotAddr;
} _GameFuncCall_LeftPressSlot_args__isset;

class GameFuncCall_LeftPressSlot_args {
 public:

  GameFuncCall_LeftPressSlot_args() : SlotAddr(0) {
  }

  virtual ~GameFuncCall_LeftPressSlot_args() throw() {}

  int32_t SlotAddr;

  _GameFuncCall_LeftPressSlot_args__isset __isset;

  void __set_SlotAddr(const int32_t val) {
    SlotAddr = val;
  }

  bool operator == (const GameFuncCall_LeftPressSlot_args & rhs) const
  {
    if (!(SlotAddr == rhs.SlotAddr))
      return false;
    return true;
  }
  bool operator != (const GameFuncCall_LeftPressSlot_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GameFuncCall_LeftPressSlot_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GameFuncCall_LeftPressSlot_pargs {
 public:


  virtual ~GameFuncCall_LeftPressSlot_pargs() throw() {}

  const int32_t* SlotAddr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GameFuncCall_LeftPressSlot_result__isset {
  _GameFuncCall_LeftPressSlot_result__isset() : success(false) {}
  bool success;
} _GameFuncCall_LeftPressSlot_result__isset;

class GameFuncCall_LeftPressSlot_result {
 public:

  GameFuncCall_LeftPressSlot_result() : success(0) {
  }

  virtual ~GameFuncCall_LeftPressSlot_result() throw() {}

  int32_t success;

  _GameFuncCall_LeftPressSlot_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const GameFuncCall_LeftPressSlot_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GameFuncCall_LeftPressSlot_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GameFuncCall_LeftPressSlot_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GameFuncCall_LeftPressSlot_presult__isset {
  _GameFuncCall_LeftPressSlot_presult__isset() : success(false) {}
  bool success;
} _GameFuncCall_LeftPressSlot_presult__isset;

class GameFuncCall_LeftPressSlot_presult {
 public:


  virtual ~GameFuncCall_LeftPressSlot_presult() throw() {}

  int32_t* success;

  _GameFuncCall_LeftPressSlot_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GameFuncCall_RightPressSlot_args__isset {
  _GameFuncCall_RightPressSlot_args__isset() : SlotAddr(false) {}
  bool SlotAddr;
} _GameFuncCall_RightPressSlot_args__isset;

class GameFuncCall_RightPressSlot_args {
 public:

  GameFuncCall_RightPressSlot_args() : SlotAddr(0) {
  }

  virtual ~GameFuncCall_RightPressSlot_args() throw() {}

  int32_t SlotAddr;

  _GameFuncCall_RightPressSlot_args__isset __isset;

  void __set_SlotAddr(const int32_t val) {
    SlotAddr = val;
  }

  bool operator == (const GameFuncCall_RightPressSlot_args & rhs) const
  {
    if (!(SlotAddr == rhs.SlotAddr))
      return false;
    return true;
  }
  bool operator != (const GameFuncCall_RightPressSlot_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GameFuncCall_RightPressSlot_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GameFuncCall_RightPressSlot_pargs {
 public:


  virtual ~GameFuncCall_RightPressSlot_pargs() throw() {}

  const int32_t* SlotAddr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GameFuncCall_RightPressSlot_result__isset {
  _GameFuncCall_RightPressSlot_result__isset() : success(false) {}
  bool success;
} _GameFuncCall_RightPressSlot_result__isset;

class GameFuncCall_RightPressSlot_result {
 public:

  GameFuncCall_RightPressSlot_result() : success(0) {
  }

  virtual ~GameFuncCall_RightPressSlot_result() throw() {}

  int32_t success;

  _GameFuncCall_RightPressSlot_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const GameFuncCall_RightPressSlot_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GameFuncCall_RightPressSlot_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GameFuncCall_RightPressSlot_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GameFuncCall_RightPressSlot_presult__isset {
  _GameFuncCall_RightPressSlot_presult__isset() : success(false) {}
  bool success;
} _GameFuncCall_RightPressSlot_presult__isset;

class GameFuncCall_RightPressSlot_presult {
 public:


  virtual ~GameFuncCall_RightPressSlot_presult() throw() {}

  int32_t* success;

  _GameFuncCall_RightPressSlot_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class GameFuncCallClient : virtual public GameFuncCallIf {
 public:
  GameFuncCallClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  GameFuncCallClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int32_t Test(const int32_t p1, const double p2);
  void send_Test(const int32_t p1, const double p2);
  int32_t recv_Test();
  void EnterGame(const int32_t Index);
  void send_EnterGame(const int32_t Index);
  void recv_EnterGame();
  void GetPlayerInfo(PlayerInfo& _return);
  void send_GetPlayerInfo();
  void recv_GetPlayerInfo(PlayerInfo& _return);
  void GetMonsterList(std::vector<MonsterInfo> & _return);
  void send_GetMonsterList();
  void recv_GetMonsterList(std::vector<MonsterInfo> & _return);
  void GetSkillInfo();
  void send_GetSkillInfo();
  void recv_GetSkillInfo();
  void ChangeAngle(const double angle);
  void send_ChangeAngle(const double angle);
  void recv_ChangeAngle();
  int32_t FindPath(const double x, const double y);
  void send_FindPath(const double x, const double y);
  int32_t recv_FindPath();
  int32_t PressKey(const int32_t key, const int32_t upordown);
  void send_PressKey(const int32_t key, const int32_t upordown);
  int32_t recv_PressKey();
  int32_t ClickKey(const int32_t key, const int32_t ctrl);
  void send_ClickKey(const int32_t key, const int32_t ctrl);
  int32_t recv_ClickKey();
  int32_t LeftPressSlot(const int32_t SlotAddr);
  void send_LeftPressSlot(const int32_t SlotAddr);
  int32_t recv_LeftPressSlot();
  int32_t RightPressSlot(const int32_t SlotAddr);
  void send_RightPressSlot(const int32_t SlotAddr);
  int32_t recv_RightPressSlot();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class GameFuncCallProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<GameFuncCallIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (GameFuncCallProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_Test(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_EnterGame(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetPlayerInfo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetMonsterList(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetSkillInfo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ChangeAngle(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_FindPath(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_PressKey(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ClickKey(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_LeftPressSlot(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_RightPressSlot(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  GameFuncCallProcessor(boost::shared_ptr<GameFuncCallIf> iface) :
    iface_(iface) {
    processMap_["Test"] = &GameFuncCallProcessor::process_Test;
    processMap_["EnterGame"] = &GameFuncCallProcessor::process_EnterGame;
    processMap_["GetPlayerInfo"] = &GameFuncCallProcessor::process_GetPlayerInfo;
    processMap_["GetMonsterList"] = &GameFuncCallProcessor::process_GetMonsterList;
    processMap_["GetSkillInfo"] = &GameFuncCallProcessor::process_GetSkillInfo;
    processMap_["ChangeAngle"] = &GameFuncCallProcessor::process_ChangeAngle;
    processMap_["FindPath"] = &GameFuncCallProcessor::process_FindPath;
    processMap_["PressKey"] = &GameFuncCallProcessor::process_PressKey;
    processMap_["ClickKey"] = &GameFuncCallProcessor::process_ClickKey;
    processMap_["LeftPressSlot"] = &GameFuncCallProcessor::process_LeftPressSlot;
    processMap_["RightPressSlot"] = &GameFuncCallProcessor::process_RightPressSlot;
  }

  virtual ~GameFuncCallProcessor() {}
};

class GameFuncCallProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  GameFuncCallProcessorFactory(const ::boost::shared_ptr< GameFuncCallIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< GameFuncCallIfFactory > handlerFactory_;
};

class GameFuncCallMultiface : virtual public GameFuncCallIf {
 public:
  GameFuncCallMultiface(std::vector<boost::shared_ptr<GameFuncCallIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~GameFuncCallMultiface() {}
 protected:
  std::vector<boost::shared_ptr<GameFuncCallIf> > ifaces_;
  GameFuncCallMultiface() {}
  void add(boost::shared_ptr<GameFuncCallIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  int32_t Test(const int32_t p1, const double p2) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Test(p1, p2);
    }
    return ifaces_[i]->Test(p1, p2);
  }

  void EnterGame(const int32_t Index) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->EnterGame(Index);
    }
    ifaces_[i]->EnterGame(Index);
  }

  void GetPlayerInfo(PlayerInfo& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetPlayerInfo(_return);
    }
    ifaces_[i]->GetPlayerInfo(_return);
    return;
  }

  void GetMonsterList(std::vector<MonsterInfo> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetMonsterList(_return);
    }
    ifaces_[i]->GetMonsterList(_return);
    return;
  }

  void GetSkillInfo() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetSkillInfo();
    }
    ifaces_[i]->GetSkillInfo();
  }

  void ChangeAngle(const double angle) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ChangeAngle(angle);
    }
    ifaces_[i]->ChangeAngle(angle);
  }

  int32_t FindPath(const double x, const double y) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->FindPath(x, y);
    }
    return ifaces_[i]->FindPath(x, y);
  }

  int32_t PressKey(const int32_t key, const int32_t upordown) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->PressKey(key, upordown);
    }
    return ifaces_[i]->PressKey(key, upordown);
  }

  int32_t ClickKey(const int32_t key, const int32_t ctrl) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ClickKey(key, ctrl);
    }
    return ifaces_[i]->ClickKey(key, ctrl);
  }

  int32_t LeftPressSlot(const int32_t SlotAddr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->LeftPressSlot(SlotAddr);
    }
    return ifaces_[i]->LeftPressSlot(SlotAddr);
  }

  int32_t RightPressSlot(const int32_t SlotAddr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->RightPressSlot(SlotAddr);
    }
    return ifaces_[i]->RightPressSlot(SlotAddr);
  }

};

}} // namespace

#endif
